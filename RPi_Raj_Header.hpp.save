// GLOBAL VARIABLES
#define N_STR 512
#define LENGTH_SINGLE_PACKET 57
#define LENGTH_BUFFER_BLOCK 40926 // 28500//4047
#define NUMBER_BUFFER_PACKET 25   // 718 //71

// UDP Parameters
#define PORT 25000
#define MAXLINE 1024

struct structStreamingTimingInformation
{
    unsigned int interval;
    unsigned int duration;
    unsigned int delay;
} sStreaming
Time;

struct structComponentLinearAcceleration
{
    // Big Endian
    float az;
    float ay;
    float ax;
};

struct structComponentRawAcceleration
{
    // Big Endian
    float r_az;
    float r_ay;
    float r_ax;
};

struct structComponentQuaternion
{
    // Big Endian
    float qw;
    float qz;
    float qy;
    float qx;
};

struct structComponentRawGyro
{
    // Big Endian
    float gz;
    float gy;
    float gx;
};

struct structComponentRawMag
{
    // Big Endian
    float mz;
    float my;
    float mx;
};

struct structEulerAngles
{
    // Big Endian
    float roll;
    float yaw;
    float pitch;
};

struct structComponentSensorData
{
    // Big Endian
    float mx;
    float my;
    float mz;

    float ax;
    float ay;
    float az;

    float gx;
    float gy;
    float gz;
};

struct structStreamingData
{
    // Big Endian
    structComponentRawAcceleration acc;
    structComponentRawGyro gyro;
    structComponentLinearAcceleration lAcc;
    structComponentQuaternion q;
};

union unionStreamingData
{
    structStreamingData sData;
    uint8_t vData[sizeof(structStreamingData)];
} uStreamingDataIMU;



inline void reconstructIMUPacket(uint8_t *dataIMUPacket, structComponentQuaternion &structQuat, structComponentLinearAcceleration &structAcce, structComponentRawGyro &structGyro, structComponentRawAcceleration &structRAcc)
{
    uint8_t *pointer;

    ////////////////////////////////////////

    pointer = (uint8_t *)&structQuat.qx;
    pointer[3] = dataIMUPacket[0];
    pointer[2] = dataIMUPacket[1];
    pointer[1] = dataIMUPacket[2];
    pointer[0] = dataIMUPacket[3];

    pointer = (uint8_t *)&structQuat.qy;
    pointer[3] = dataIMUPacket[4];
    pointer[2] = dataIMUPacket[5];
    pointer[1] = dataIMUPacket[6];
    pointer[0] = dataIMUPacket[7];

    pointer = (uint8_t *)&structQuat.qz;
    pointer[3] = dataIMUPacket[8];
    pointer[2] = dataIMUPacket[9];
    pointer[1] = dataIMUPacket[10];
    pointer[0] = dataIMUPacket[11];

    pointer = (uint8_t *)&structQuat.qw;
    pointer[3] = dataIMUPacket[12];
    pointer[2] = dataIMUPacket[13];
    pointer[1] = dataIMUPacket[14];
    pointer[0] = dataIMUPacket[15];

    ////////////

    pointer = (uint8_t *)&structAcce.ax;
    pointer[3] = dataIMUPacket[16];
    pointer[2] = dataIMUPacket[17];
    pointer[1] = dataIMUPacket[18];
    pointer[0] = dataIMUPacket[19];

    pointer = (uint8_t *)&structAcce.ay;
    pointer[3] = dataIMUPacket[20];
    pointer[2] = dataIMUPacket[21];
    pointer[1] = dataIMUPacket[22];
    pointer[0] = dataIMUPacket[23];

    pointer = (uint8_t *)&structAcce.az;
    pointer[3] = dataIMUPacket[24];
    pointer[2] = dataIMUPacket[25];
    pointer[1] = dataIMUPacket[26];
    pointer[0] = dataIMUPacket[27];

    ////////////

    pointer = (uint8_t *)&structGyro.gx;
    pointer[3] = dataIMUPacket[28];
    pointer[2] = dataIMUPacket[29];
    pointer[1] = dataIMUPacket[30];
    pointer[0] = dataIMUPacket[31];

    pointer = (uint8_t *)&structGyro.gy;
    pointer[3] = dataIMUPacket[32];
    pointer[2] = dataIMUPacket[33];
    pointer[1] = dataIMUPacket[34];
    pointer[0] = dataIMUPacket[35];

    pointer = (uint8_t *)&structGyro.gz;
    pointer[3] = dataIMUPacket[36];
    pointer[2] = dataIMUPacket[37];
    pointer[1] = dataIMUPacket[38];
    pointer[0] = dataIMUPacket[39];

    ////////////

    pointer = (uint8_t *)&structRAcc.r_ax;
    pointer[3] = dataIMUPacket[40];
    pointer[2] = dataIMUPacket[41];
    pointer[1] = dataIMUPacket[42];
    pointer[0] = dataIMUPacket[43];

    pointer = (uint8_t *)&structRAcc.r_ay;
    pointer[3] = dataIMUPacket[44];
    pointer[2] = dataIMUPacket[45];
    pointer[1] = dataIMUPacket[46];
    pointer[0] = dataIMUPacket[47];

    pointer = (uint8_t *)&structRAcc.r_az;
    pointer[3] = dataIMUPacket[48];
    pointer[2] = dataIMUPacket[49];
    pointer[1] = dataIMUPacket[50];
    pointer[0] = dataIMUPacket[51];
}

inline void constructLogPacket(uint8_t *dataPacket, uint32_t currentTime,
                               structComponentQuaternion structQuat,
                               structComponentLinearAcceleration structAcce,
                               structComponentRawGyro structGyro,
                               structComponentRawAcceleration structRAcc,
                               uint16_t p0, uint16_t p1, uint16_t p2, uint16_t p3,
                               uint16_t p4, uint16_t p5, uint16_t p6, uint16_t p7,
                               uint32_t syncTime, uint8_t syncTrigger)
{
    uint8_t *pointer;
    int16_t val;

    // HEADER
    ////////////////////////////////////////

    dataPacket[0] = 0x01;
    dataPacket[1] = 0x02;
    dataPacket[2] = 0x03;

    // TIMESTAMP
    ////////////////////////////////////////

    pointer = (uint8_t *)&currentTime;
    dataPacket[3] = pointer[3];
    dataPacket[4] = pointer[2];
    dataPacket[5] = pointer[1];
    dataPacket[6] = pointer[0];

    // QUATERNION
    ////////////////////////////////////////

    val = int16_t(structQuat.qw * 5000.0f);
    pointer = (uint8_t *)&val;
    dataPacket[7] = pointer[1];
    dataPacket[8] = pointer[0];

    val = int16_t(structQuat.qx * 5000.0f);
    pointer = (uint8_t *)&val;
    dataPacket[9] = pointer[1];
    dataPacket[10] = pointer[0];

    val = int16_t(structQuat.qy * 5000.0f);
    pointer = (uint8_t *)&val;
    dataPacket[11] = pointer[1];
    dataPacket[12] = pointer[0];

    val = int16_t(structQuat.qz * 5000.0f);
    pointer = (uint8_t *)&val;
    dataPacket[13] = pointer[1];
    dataPacket[14] = pointer[0];

    // LINEAR ACCELERATION
    ////////////////////////////////////////

    val = int16_t(structAcce.ax * 1000.0f);
    pointer = (uint8_t *)&val;
    dataPacket[15] = pointer[1];
    dataPacket[16] = pointer[0];

    val = int16_t(structAcce.ay * 1000.0f);
    pointer = (uint8_t *)&val;
    dataPacket[17] = pointer[1];
    dataPacket[18] = pointer[0];

    val = int16_t(structAcce.az * 1000.0f);
    pointer = (uint8_t *)&val;
    dataPacket[19] = pointer[1];
    dataPacket[20] = pointer[0];

    // ANGULAR VELOCITY
    ////////////////////////////////////////

    val = int16_t(structGyro.gx * 900.0f);
    pointer = (uint8_t *)&val;
    dataPacket[21] = pointer[1];
    dataPacket[22] = pointer[0];

    val = int16_t(structGyro.gy * 900.0f);
    pointer = (uint8_t *)&val;
    dataPacket[23] = pointer[1];
    dataPacket[24] = pointer[0];

    val = int16_t(structGyro.gz * 900.0f);
    pointer = (uint8_t *)&val;
    dataPacket[25] = pointer[1];
    dataPacket[26] = pointer[0];

    // ACCELERATION
    ////////////////////////////////////////

    val = int16_t(structRAcc.r_ax * 1000.0f);
    pointer = (uint8_t *)&val;
    dataPacket[27] = pointer[1];
    dataPacket[28] = pointer[0];

    val = int16_t(structRAcc.r_ay * 1000.0f);
    pointer = (uint8_t *)&val;
    dataPacket[29] = pointer[1];
    dataPacket[30] = pointer[0];

    val = int16_t(structRAcc.r_az * 1000.0f);
    pointer = (uint8_t *)&val;
    dataPacket[31] = pointer[1];
    dataPacket[32] = pointer[0];

    // PRESSURE SENSORS
    ////////////////////////////////////////

    pointer = (uint8_t *)&p0;
    dataPacket[3] = pointer[1];
    dataPacket[34] = pointer[0];

    pointer = (uint8_t *)&p1;
    dataPacket[35] = pointer[1];
    dataPacket[36] = pointer[0];

    pointer = (uint8_t *)&p2;
    dataPacket[37] = pointer[1];
    dataPacket[38] = pointer[0];

    pointer = (uint8_t *)&p3;
    dataPacket[39] = pointer[1];
    dataPacket[40] = pointer[0];

    pointer = (uint8_t *)&p4;
    dataPacket[41] = pointer[1];
    dataPacket[42] = pointer[0];

    pointer = (uint8_t *)&p5;
    dataPacket[43] = pointer[1];
    dataPacket[44] = pointer[0];

    pointer = (uint8_t *)&p6;
    dataPacket[45] = pointer[1];
    dataPacket[46] = pointer[0];

    pointer = (uint8_t *)&p7;
    dataPacket[47] = pointer[1];
    dataPacket[48] = pointer[0];

    // SYNC SIGNAL
    ////////////////////////////////////////

    dataPacket[49] = syncTrigger;

    pointer = (uint8_t *)&syncTime;
    dataPacket[50] = pointer[3];
    dataPacket[51] = pointer[2];
    dataPacket[52] = pointer[1];
    dataPacket[53] = pointer[0];

    // TAIL
    ////////////////////////////////////////

    dataPacket[54] = 0x04;
    dataPacket[55] = 0x05;
    dataPacket[56] = 0x06;
}

inline void reconstructBinaryPacketBinary_test(uint8_t *recvbuffer, float &ax, float &ay, float &az)
{
  uint8_t *pointer;

  pointer = (uint8_t *)&ax;
  pointer[3] = recvbuffer[0];
  pointer[2] = recvbuffer[1];
  pointer[1] = recvbuffer[2];
  pointer[0] = recvbuffer[3];

  pointer = (uint8_t *)&ay;
  pointer[3] = recvbuffer[4];
  pointer[2] = recvbuffer[5];
  pointer[1] = recvbuffer[6];
  pointer[0] = recvbuffer[7];

  pointer = (uint8_t *)&az;
  pointer[3] = recvbuffer[8];
  pointer[2] = recvbuffer[9];
  pointer[1] = recvbuffer[10];
  pointer[0] = recvbuffer[11];
}

